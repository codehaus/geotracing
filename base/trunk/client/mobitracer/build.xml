<!--
  Ant build file for MobiTracer.

  $Id$
-->
<project name="MobiTracer" default="build" basedir=".">
    <property name="geotracing.base.dir" value="${basedir}/../.."/>
	<property name="geotracing.external.dir" value="${geotracing.base.dir}/external"/>

    <!-- sets paths to all external package dirs. -->
	<property file="${geotracing.external.dir}/build.properties"/>

	<property name="build.dir" value="${basedir}/build"/>
	
	<property name="keyworx.j2me.dir" value="${keyworx.dir}/client/j2me"/>
	<property name="kwclient.src" value="${keyworx.j2me.dir}/kwclient/src"/>
	<property name="mjox.src" value="${keyworx.j2me.dir}/mjox/src"/>
	<!-- Project global properties; overrule by modifying build.properties -->
	<property file="build.properties"/>

	<property name="project.src.path" value="${basedir}/src:${kwclient.src}:${mjox.src}"/>
	<property name="project.rsc.dir" value="${basedir}/rsc"/>
	<property name="project.etc.dir" value="${basedir}/etc"/>
	<property name="project.manifest" value="${project.etc.dir}/MANIFEST.MF"/>

	<property name="project.jar" value="${build.dir}/${project.name}.jar"/>

	<property name="projectobf.jar" value="${build.dir}/${project.name}obf.jar"/>
	<property name="project.jad" value="${build.dir}/${project.name}.jad"/>

	<property name="proguard.jar" value="${proguard.dir}/lib/proguard.jar"/>

	<property name="classes.dir" value="${build.dir}/classes"/>
	<property name="obf.dir" value="${build.dir}/obf"/>
	<property name="preverify.dir" value="${build.dir}/preverify"/>

	<property name="preverify" value="${mppsdk.dir}/osx/preverify/preverify"/>
	<property name="btsend" value="${project.etc.dir}/btsend.sh"/>

	<property name="connbridge.jar" value="${mppsdk.dir}/bluetooth/connbridge/lib/connbridge.jar"/>
	<property name="emulator.jar" value="${mppsdk.dir}/player.jar"/>
	<property name="emulator.class" value="com.mpp.player.PowerPlayerApp"/>
	<property name="midpemu.jar" value="${mppsdk.dir}/midp.jar"/>
	<property name="btpemu.jar" value="${mppsdk.dir}/bluetooth/bt.jar"/>
	<property name="cldcemu.jar" value="${mppsdk.dir}/cldc.jar"/>
	<property name="adapter.jar" value="${mppsdk.dir}/adapter.jar"/>
	<property name="jsr82.zip" value="${btapi.dir}/lib/jsr82.zip"/>

	<property name="avetana.jar" value="${avetana.dir}/avetanaBluetooth.jar"/>
	<property name="mmapi.jar" value="${mmapi.dir}/mmapi.jar"/>


	<!-- Various paths -->
	<property name="preverify.classpath" value="${midp2.dir}/classes:${jsr82.zip}"/>
	<property name="boot.classpath" value="${midp2.dir}/classes"/>

	<path id="compile.classpath">
		<pathelement location="${jsr82.zip}"/>
		<pathelement location="${mmapi.jar}"/>

	</path>

	<path id="emulator.classpath">
		<pathelement location="${connbridge.jar}"/>
		<pathelement location="${avetana.jar}"/>
		<pathelement location="${emulator.jar}"/>
		<pathelement location="${adapter.jar}"/>
		<pathelement location="${cldcemu.jar}"/>
		<pathelement location="${midpemu.jar}"/>
		<pathelement location="${emulator.jar}"/>
	</path>

	<!-- Optional download/upack of external packages. -->
	<target name="externals">
		<echo message="downloading and unpacking external packages"/>
		
		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${avetana}"/>
		</ant>

		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${btapi}"/>
		</ant>

		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${keyworx}"/>
		</ant>
		
		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${midp2}"/>
		</ant>
		
		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${mmapi}"/>
		</ant>
		
		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${mppsdk}"/>
		</ant>
		
		<exec executable="chmod">
			<arg line="+x ${preverify}"/>
		</exec>

		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${proguard}"/>
		</ant>

	</target>

	<target name="compile" depends="clean,externals">
		<mkdir dir="${classes.dir}"/>
		<javac
			destdir="${classes.dir}"
			target="1.1"
			bootclasspath="${boot.classpath}">
			<src path="${project.src.path}"/>
			<classpath refid="compile.classpath"/>
		</javac>
	</target>

	<target name="obfuscate" depends="compile">

		<java fork="yes" classname="proguard.ProGuard" classpath="${proguard.jar}">
			<arg line="-libraryjars ${boot.classpath}:${jsr82.zip}"/>
			<arg line="-injars ${classes.dir}"/>
			<arg line="-outjar ${obf.dir}"/>
			<arg line="-keep 'public class * extends
			   javax.microedition.midlet.MIDlet'"/>
		</java>

	</target>

	<target name="preverify" depends="obfuscate">
		<mkdir dir="${preverify.dir}"/>
		<exec executable="${preverify}">
			<arg line="-classpath ${preverify.classpath}"/>
			<arg line="-d ${preverify.dir}"/>
			<arg line="${obf.dir}"/>
		</exec>
	</target>

	<target name="jar" depends="preverify">
		<property name="manifest.file" value="${build.dir}/MANIFEST.MF"/>
		<property name="jad.file" value="${build.dir}/mt.jad"/>
		<property name="version.file" value="${build.dir}/version.html"/>

		<!-- Set essential MIDlet properties. -->
		<concat destfile="${manifest.file}">
			<filelist dir="${project.etc.dir}" files="MANIFEST.MF"/>
			<filterchain>
				<expandproperties/>
			</filterchain>
		</concat>

		<!-- Set essential MIDlet properties. -->
		<concat destfile="${jad.file}">
			<filelist dir="${project.etc.dir}" files="mt.jad"/>
			<filterchain>
				<expandproperties/>
			</filterchain>
		</concat>

		<!-- Generate version file. -->
		<concat destfile="${version.file}">
			<filelist dir="${project.etc.dir}" files="version.html"/>
			<filterchain>
				<expandproperties/>
			</filterchain>
		</concat>

		<jar basedir="${preverify.dir}"
			jarfile="${project.jar}"
			manifest="${manifest.file}">
			<fileset dir="${project.rsc.dir}">
				<include name="*.png"/>
			</fileset>
		</jar>
	</target>

	<target name="build" depends="jar">

	</target>

	<target name="run">
		<java classname="${emulator.class}" fork="true">
			<classpath refid="emulator.classpath"/>
			<!-- <arg value="-clearRecordStores"/> -->
			<arg value="${project.jar}"/>
		</java>
	</target>

	<target name="install">
		
		<exec executable="chmod">
			<arg line="+x ${btsend}"/>
		</exec>
		<exec executable="${btsend}">
			<arg line="${project.jar}"/>
		</exec>
	</target>

	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>


</project>
