<!-- This file controls the build process.                    -->
<!-- The most important target is the j2mepolish-target,      -->
<!-- which controls for what devices the application should   -->
<!-- be created and so on.                                    -->
<!--                                                          -->
<!-- Important: when you have no Wireless Toolkit installed   -->
<!-- you need to define the "preverify"-attribute             -->
<!-- of the <build>-element of the J2ME Polish task.          -->
<!--                                                          -->
<!-- When you call Ant from the command-line, you can         -->
<!-- call "ant test j2mepolish" to skip the obfuscation       -->
<!-- and to build the example for fewer handsets.             -->
<!-- The default target builds and obfuscates the example.    -->
<!--                                                          -->
<!-- The full documentation can be found at                   -->
<!-- http://www.j2mepolish.org                                -->
<!--                                                          -->
<!-- Have fun!                                                -->
<project name="WP Phone J2MEPolish" default="build">

    <property name="geotracing.base.dir" value="${basedir}/../../../../../base/trunk"/>
	<property name="geotracing.external.dir" value="${geotracing.base.dir}/external"/>

	<!-- sets paths to all external package dirs. -->
	<property file="${geotracing.external.dir}/build.properties"/>

    <property name="keyworx.j2me.dir" value="${keyworx.dir}/client/j2me"/>
	<property name="kwclient.src" value="${keyworx.j2me.dir}/kwclient/src"/>
	<property name="mjox.src" value="${keyworx.j2me.dir}/mjox/src"/>
	<property name="mobitracer.src" value="${geotracing.base.dir}/client/mobitracer/src"/>

    <property file="build.properties"/>
    <property name="connbridge.jar" value="${mppsdk.dir}/bluetooth/connbridge/lib/connbridge.jar"/>
    <property name="emulator.jar" value="${mppsdk.dir}/player.jar"/>
	<property name="emulator.class" value="com.mpp.player.PowerPlayerApp"/>
	<property name="midpemu.jar" value="${mppsdk.dir}/midp.jar"/>
	<property name="btpemu.jar" value="${mppsdk.dir}/bluetooth/bt.jar"/>
	<property name="cldcemu.jar" value="${mppsdk.dir}/cldc.jar"/>
	<property name="adapter.jar" value="${mppsdk.dir}/adapter.jar"/>
    <property name="jsr82.zip" value="${btapi.dir}/lib/jsr82.zip"/>
    <property name="jsr179.jar" value="${geotracing.external.dir}/jsr179/lib/jsr179.jar"/>
	<property name="avetana.jar" value="${avetana.dir}/avetanaBluetooth.jar"/>
	<property name="mmapi.jar" value="${mmapi.dir}/mmapi.jar"/>

    <property name="project.etc.dir" value="${basedir}/etc"/>
    <property name="btsend" value="${project.etc.dir}/btsend.sh"/>

    <!-- import user specific properties -->
	<property file="${user.name}.properties" />

	<!-- The wtk.home property should point to the directory      -->
	<!-- containing the Wireless Toolkit.                         -->
	<property name="wtk.home" location="%{WTK_HOME}" />

	<!-- The polish.home property should point to the directory   -->
	<!-- containing the J2ME Polish installation.-->
	<property name="polish.home" location="/opt/j2me-polish" />    

    <!-- the device for the test mode - you can define it on the command-line
	     using the -D switch, e.g. ant -Ddevice=Generic/midp2 emulator -->
	<property name="device" value="Generic/midp1"/>	

	<!-- The siemens.home, nokia.home and motorola.home-          -->
	<!-- properties can be necessary when their emulators         -->
	<!-- should be started.                                       -->
	<!-- The directory which contains the Siemens-SMTK
		<property name="siemens.home" location="C:\siemens" />
	-->
	<!-- The directory which contains the Nokia-emulators
		<property name="nokia.home" location="C:\Nokia" />
	-->
	<!-- The path to the Sony-Ericsson SDK
		<property name="sony-ericsson.home" location="C:\SonyEricsson\J2ME_SDK" />
	-->
	<!-- The directory which contains the Motorola-emulators
		<property name="motorola.home" location="C:\Program Files\Motorola\SDK v4.3 for J2ME" />
	-->

	<!-- Palm settings -->
	<!--
		The directory which contains the PalmSim.exe simulator:
		<property name="palm.simulator.home" location="C:\Program Files\Palm\Simulator" />
	-->
	<!--
		The directory which contains the Tools/bin/jartoprc.exe converter:
		<property name="palm.weme.home" location="C:\Program Files\Palm\WEME57" />
	-->
	<!-- BlackBerry settings -->
	<!--
		The directory which contains the BlackBerry JDE:
		<property name="blackberry.home" location="C:\Program Files\Research In Motion/BlackBerry JDE 4.0.2" />
	-->

    <path id="compile.classpath">
        <pathelement location="${jsr179.jar}"/>
        <!--
		<pathelement location="${jsr82.zip}"/>
		<pathelement location="${mmapi.jar}"/>-->
	</path>

    <path id="emulator.classpath">
        <pathelement location="${connbridge.jar}"/>
        <pathelement location="${avetana.jar}"/>
        <pathelement location="${jsr179.jar}"/>
        <pathelement location="${emulator.jar}"/>
        <pathelement location="${adapter.jar}"/>
        <pathelement location="${cldcemu.jar}"/>
        <pathelement location="${midpemu.jar}"/>
        <pathelement location="${emulator.jar}"/>
    </path>


    <!-- Definition of the J2ME Polish task:                      -->
	<taskdef name="j2mepolish"
		classname="de.enough.polish.ant.PolishTask"
		classpath="${polish.home}/lib/enough-j2mepolish-build.jar:${polish.home}/lib/enough-j2mepolish-extensions.jar:${polish.home}/lib/jdom.jar"
	/>



    <!-- build targets, each target can be called via "ant [name]",
		 e.g. "ant clean", "ant test j2mepolish" or just "ant" for calling the default-target -->

	<target name="setdeploy"
		description="Call this target first to set the OTA download-URL, e.g. ant setdeploy j2mepolish"
		>
		<property name="deploy-url" value="http://www.company.com/download/" />
	</target>

	<target name="enableDebug"
		description="Call this target first to skip the obfuscation step, call the emulator and start the debugger, e.g. ant enableDebug j2mepolish"
		>
		<property name="debug" value="true" />
	</target>


	<target name="test"
		description="Call this target first to skip the obfuscation step and call the emulator, e.g. ant test j2mepolish"
		>
		<property name="test" value="true" />
		<property name="dir.work" value="build/test" />
	</target>

	<target name="init" depends="externals">
	  	<property name="test" value="false" />
		<property name="dir.work" value="build/polish" />
		<property name="deploy-url" value="http://test.mlgk.nl/wp/ota/" />
		<property name="resource.dir" value="resources" />
        <property name="source.dir" value="${basedir}/source" />
    </target>

	<!-- In this target the J2ME Polish task is used.             -->
	<!-- It has 3 sections:                                       -->
	<!--    1. The info-section defines some general information  -->
	<!--    2. The deviceRequirements-section chooses the devices -->
	<!--       for which the application is optimized.            -->
	<!--    3. The build-section controls the actual build        -->
	<!--       process.                                           -->
	<target name="build"
			depends="init"
			description="This is the controller for the J2ME build process."
			>
		<j2mepolish>
		    <!-- general settings, these settings basically form the JAD-attributes. -->
		    <!-- Have a look at the <jad>-section for setting specialised attributes.
		         You can also define localized attributes in the resources/messages.txt files -->
            <!--description="Mobile client for MLGK project"-->
            <info
				license="GPL"
				name="MLGK"
				version="1.0.0"
				description=""
				vendorName="GeoWorX"
				infoUrl="http://www.j2mepolish.org"
				icon="app.png"
				jarName="${polish.vendor}-${polish.name}-${polish.locale}-mlgk.jar"
				jarUrl="${polish.jarName}"
				copyright="Copyright 2005 Enough Software. All rights reserved."
				deleteConfirm="Do you really want to kill me?"
			/>
			<!-- selection of supported devices -->
			<!-- In the test mode the application is build only for the  -->
			<!-- Generic/midp1 phone, but when the test-property is set to false, -->
			<!-- the second deviceRequirements will be used instead. -->
			<deviceRequirements if="test">
				<requirement name="Identifier" value="${device}" />
			</deviceRequirements>
			<deviceRequirements unless="test">
<!--				<requirement name="Identifier" value="Sony-Ericsson/P900, Nokia/Series60, Nokia/Series60Midp2, Generic/midp2, Generic/midp1" />  -->
				<!--<requirement name="Identifier" value="Nokia/Series60Midp2, Nokia/N73" />-->
				<requirement name="Identifier" value="Nokia/N73" />
				<!-- on could use other devices for real builds, e.g. :
				<or>
					<and>
						<requirement name="JavaPackage" value="nokia-ui" />
						<requirement name="BitsPerPixel" value="16+" />
					</and>
				</or>
				 -->
			</deviceRequirements>
		    <!-- build settings -->
			<!--
			 -->
            
            <build
				sourceDir="${source.dir}:${kwclient.src}:${mjox.src}:${mobitracer.src}"
                symbols="ExampleSymbol, AnotherExample"
				fullscreen="menu"
				usePolishGui="true"
				workDir="${dir.work}"
			>
                <compiler>
                    <classpath refid="compile.classpath"/>
                </compiler>
                
                <!-- midlets definition -->
				<midlet class="org.walkandplay.client.phone.WPMidlet" name="MLGK" />
				<!-- project-wide variables - used for preprocessing.  -->
				<!-- You can set localized variables in the resources/messages.txt files as well.  -->
				<variables includeAntProperties="true" >
					<!-- example variables:
					In your Java-code you can use the following snipet to use this variable:
					//#= private static final String UPDATE_URL = "${ update-url }";
					You can change the title of the sample application with the "title"-var.
					-->
					<variable name="update-url" value="http://test.mlgk.nl/update" />
					<variable name="title" value="MLGK" />
				</variables>
				<!-- Here you can set the dir attribute to "resources2" for an alternative design. -->
				<resources
					dir="${resource.dir}"
					defaultexcludes="yes"
					excludes="readme.txt"
				>
					<!-- you can add resources based on complex criterias:
					<fileset
						dir="resources/multimedia"
						includes="*.wav"
						if="polish.audio.wav"
					/>
					<fileset
						dir="resources/multimedia"
						includes="*.mid"
						if="polish.audio.midi and not polish.audio.wav"
					/>
					-->
					<!-- add the localization element for created localized
					     versions of your application: -->
<!--					<localization locales="de_DE, en_US" unless="test" />  -->
					<localization locales="en_US" unless="test" />
					<localization locales="en_US" if="test" />
				</resources>
				<!-- obfuscator settings: do not obfuscate when the test-property is true -->
				<obfuscator name="ProGuard" useDefaultPackage="true" unless="test" >
					<!--
					You can set additional parameters here, e.g.:
					<parameter name="optimize" value="false" />
					-->
				</obfuscator>
				<!-- debug settings: only include debug setting when the test-property is true -->
				<debug if="test" showLogOnError="true" verbose="true" level="error">
					<filter pattern="de.enough.polish.example.*" level="debug" />
					<filter pattern="de.enough.polish.ui.*" level="warn" />
				</debug>
                <!-- user defined JAD attributes can also be used: -->
				<jad>
                    <attribute name="MIDlet-Permissions" value="javax.microedition.io.Connector.http"/>
					<attribute name="MIDlet-Permissions-Opt" value="javax.microedition.io.Connector.bluetooth.client,javax.microedition.media.control.VideoControl.getSnapshot" />
					<attribute name="kw-url" value="http://test.mlgk.nl/wp" />
					<attribute name="kw-server" value="test.mlgk.nl" />					
					<attribute name="kw-timeout" value="20" />
					<attribute name="kw-user" value="yellow2" />
					<attribute name="kw-password" value="user" />
					<attribute name="kw-amulet" value="mlgkamulet" />
					<attribute name="kw-port" value="6050" />
					<attribute name="kw-app" value="geoapp" />
					<attribute name="kw-role" value="user" />
					<attribute name="volume" value="70" />
					<attribute name="audio-rate" value="8000" />
					<attribute name="audio-bits" value="8" />
					<attribute name="gps-sample-interval" value="15000" />
					<attribute name="gps-min-sats" value="4" />
					<attribute name="gps-min-hdop" value="2" />
					<attribute name="device-screen-width" value="240" />
					<attribute name="device-screen-height" value="320" />
					<attribute name="MPP-Show-Keypad" value="true" />
                    <attribute name="MPP-Width" value="240" />
					<attribute name="MPP-Height" value="320" />
					<attribute name="mt-options" value="full" />
                    
                    <attribute name="Nokia-MIDlet-Category" value="Game" if="polish.group.Series40" />
				</jad>
				<!--
				   This is an example for signing MIDlets with J2ME Polish.
				   You can set the password on the commandline by calling "ant -Dpassword=secret",
				   or by setting the Ant property above.
				   Signing is done only for MIDP/2.0 devices.
				-->
				<!--
				<sign
					key="SignMIDlet"
					keystore="midlets.ks"
					password="${password}"
					unless="test"
				/>
				-->
			</build>

			<!-- execution of emulator(s) -->
			<emulator
				wait="true"
				securityDomain="trusted"
				enableProfiler="true"
				enableMemoryMonitor="true"
				enableNetworkMonitor="true"
				if="debug"
                >
                <!--
				<parameter name="-Xjam" value="transient=http://localhost:8080/${polish.jadName}" />
				-->
			</emulator>

			<emulator
				wait="true"
				trace="class"
				securityDomain="trusted"
				enableProfiler="false"
				enableMemoryMonitor="false"
				enableNetworkMonitor="false"
				if="test and not debug"
				>
				<!-- this is an example for connecting to a debugger - use the ${polish.debug.port} Ant property
				     for getting to know the port of the debugger. In this example the
				     "connect-debugger" target is also required.
				-->
				<!--
				<debugger name="antcall" target="connect-debugger" port="6001" />
				-->
			</emulator>


		</j2mepolish>
	</target>

    <!-- Optional download/upack of external packages. -->
	<target name="externals">
		<echo message="downloading and unpacking external packages"/>

		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${avetana}"/>
		</ant>

		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${btapi}"/>
		</ant>

        <ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${jsr179}"/>
		</ant>

        <ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${keyworx}"/>
		</ant>

		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${midp2}"/>
		</ant>

		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${mmapi}"/>
		</ant>

		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${mppsdk}"/>
		</ant>

		<ant antfile="${geotracing.external.dir}/build.xml" target="get-external" inheritall="false">
			<property name="package" value="${proguard}"/>
		</ant>

	</target>

    <target name="run" depends="clean,build">
		<java classname="${emulator.class}" fork="true">
			<classpath refid="emulator.classpath"/>
			<!-- <arg value="-clearRecordStores"/> -->
			<arg value="dist/Nokia-N73-en_US-mlgk.jar"/>
		</java>
	</target>

    <target
		name="emulator"
		depends="test,build"
		description="invokes the emulator"            
    >
	</target>

	<target name="clean"
	  		description="allows a clean build. You should call [ant clean] whenever you made changes to devices.xml, vendors.xml or groups.xml">
		<delete dir="build" />
		<delete dir="dist" includes="**/*" />
	</target>

	<target name="enableN73" >
		<property name="resource.dir" value="resources/Nokia/N73" />
		<property name="dir.work" value="build/N73" />
	</target>

    <target name="install" depends="init,clean,build">

		<chmod file="${btsend}" perm="ugo+x"/>

		<exec executable="${btsend}">
			<arg line="dist/Nokia-N73-en_US-mlgk.jar"/>
		</exec>
	</target>

    <target name="N73" description="launches the application with the N73 design" depends="enableN73, test, build" />

    <target name="debug" description="debugs the project" depends="enableDebug, test, build" />

</project>
