LOGBOOK PostGIS RESEARCH

== Mac OSX Installation ==
- What is PostGIS.
* tutorials
http://www.bostongis.com/?content_name=postgis_tut01
see http://postgis.refractions.net/docs/ch02.html

- prerequisites
Mac OSX Tiger 10.4.7
Developer tools/Xcode installed
Darwinports installed
Assumed is that Darwinports is installed in /opt/local

- overview
Installing PostGIS usually involves a 3-step process:
1) install PostgreSQL through DarwinPorts
2) Install PostGIS from source
3) configure a template DB for PostGIS

1- install PostgreSQL
sudo port install postgresql81
this installs PostgreSQL 8.1.8
Find the PostgreSQL config in /opt/local/share/postgresql81
add /opt/local/lib/pgsql8/bin to your PATh (e.g. in /etc/profile)

## start: util script in /opt/bin/pgup
export LOCAL_DB=/var/pgsql
export PGDATA=$LOCAL_DB/data
export PGHOST=$LOCAL_DB
export PGLOG=/var/log/pgsql/log.txt

# pg_ctl -w -l $PGLOG  -m immediate start (???? alt)
postmaster -D /var/pgsql/data  &

## stop: /opt/bin/pgdown
export LOCAL_DB=/var/pgsql
export PGDATA=$LOCAL_DB/data
export PGHOST=$LOCAL_DB
export PGLOG=/var/log/pgsql/log.txt

pg_ctl -w -l $PGLOG  -m immediate stop

- postgis install
Do not use Darwinports port (yet) as it installs PostgreSQL 8.2 which is incompatible with
8.1 (the latest on Linux Debian testing) !
download postgresql-1.2.1 from http://postgis.refractions.net/
mkdir /opt/postgis
tar xzvf postgis-1.2.1.tar.gz
pg_config # sets all vars required for postgis compilation
./configure
make
sudo make install

updates /opt/local/lib/postgresql81/

- create template postgis DB
The name of our template is simply "postgis". It can be any name, but PostGIS
DBs in GeoTracing will always use the template "postgis".
Steps.
* createdb postgis
* shell: createlang plpgsql postgis
* psql -d postgis  -f /opt/local/share/lwpostgis.sql (loads functions/objects)
* psql -d postgis  -f /opt/local/share/spatial_ref_sys.sql (loads EPSG spatial ref system)

- PGAdminIII
Handy tool for managing PostgreSQL.
* download from http://www.pgadmin.org
* installed 1.6.0 beta 1 mac os x

- PHPPgAdmin
Web tool similar to PHPMyAdmin.
- need pgsql.so in php
- install php5
 * download from http://www.entropy.ch/software/macosx/php/
 * unpack .tar.gz
 * uncomment php modules in /etc/httpd/httpd.conf
 * run package installer

- test keyworx with postgresql JDBC driver
JDBC driver download
http://jdbc.postgresql.org
select postgresql-8.1-407.jdbc3.jar (JDBC 3)

- postgis Java install
not part of darwinport install so have to rebuild from source
build postgis.jar
http://bindist.finkmirrors.net/bindist/dists/fink-0.8.1/main/source/database/
download postgis-1.1.1.tar.gz
unpack
cd jdbc2
export POSTGIS_BUILD_CLASSPATH=/Users/just/project/waag/kwx/build/external/postgresql-8.1-407/postgresql.jar
make
make zipfile postgis-jdbc-1.1.1.zip
put in external and download when GT server is built

- run postgresql server
postmaster -D /var/pgsql/data

- test1 import shapefiles
An example session using the loader to create an input file and uploading it might look like this:

# shp2pgsql shaperoads myschema.roadstable > roads.sql
# psql -d roadsdb -f roads.sql

 shp2pgsql dotroads dotroads > ../../dotroads.sql
OK

- test JDBC
see TestServer.java
modified original example:
when using
Class.forName("org.postgis.DriverWrapperLW");
now no need to do AddType

- test Oase
cannot use prepared statements
INSERT INTO spatialone VALUES (?,?,?,?,?)
INSERT INTO spatialone VALUES (28,TheName,1160432443975,1160432443975,GeomFromText('POINT (4.92 52.35)', 4326))

UPDATE spatialone SET point=GeomFromText('POINT (4.92 52.35)', 4326), modificationdate=1160430674652 WHERE id = 21
gives
org.postgresql.util.PSQLException: ERROR: column "point" is of type geometry but expression is of type character varying

- version test
** PostGIS jdbc client code **
	getFullVersion: PostGIS JDBC V1.1.0

** PGJDBC Driver **
	getVersion: PostgreSQL 8.1 JDBC3 with SSL (build 407)
	getMajorVersion: 8
	getMinorVersion: 1

** PostgreSQL Server **
	version: PostgreSQL 8.1.3 on i686-apple-darwin8.7.1, compiled by GCC i686-apple-darwin8-gcc-4.0.1 (GCC) 4.0.1 (Apple Computer, Inc. build 5363)

** PostGIS Server **
	postgis_version: 1.1 USE_GEOS=1 USE_PROJ=1 USE_STATS=1
	postgis_proj_version: Rel. 4.4.9, 29 Oct 2004
	postgis_scripts_installed: 1.1.1
	postgis_lib_version: 1.1.1
	postgis_scripts_released: 1.1.1
	postgis_uses_stats: t
	postgis_geos_version: 2.2.1-CAPI-1.0.1
	postgis_scripts_build_date: 2006-10-04 08:22:06
	postgis_lib_build_date: 2006-10-04 08:22:06
	postgis_full_version: POSTGIS="1.1.1" GEOS="2.2.1-CAPI-1.0.1" PROJ="Rel. 4.4.9, 29 Oct 2004" USE_STATS

- test with AddGeometryColumn
String createSQL = "create table latlon_test (id int4); ";
String addgeom = "SELECT AddGeometryColumn('gistest', 'latlon_test','geom', 4326,'POINT',2)";
String dropGeom = "SELECT DropGeometryColumn('gistest', 'latlon_test','geom')";
String insertPointSQL = "INSERT INTO latlon_test values (10, GeomFromText('POINT (4.92 52.35)', 4326) )";

important note: dimension must reflect number of coordinates
"the Dimension in this case is not the "mathematical
dimension" where point = 0, line = 1, area =2, but it rather is the
dimension of the cooridnates use, ie, 2= x&y, 3 = X&y&z, 4=X&y&z&T(ime)"


From Postgis manual:
Q: What is the best way to find all objects within a radius of another object? 
To use the database most efficiently, it is best to do radius queries which combine the radius test with a bounding
box test: the bounding box test uses the spatial index, giving fast access to a subset of data which the radius test
is then applied to.
The Expand() function is a handy way of enlarging a bounding box to allow an index search of a region of
interest. The combination of a fast access index clause and a slower accurate distance test provides the best
combination of speed and precision for this query.
For example, to find all objects with 100 meters of POINT(1000 1000) the following query would work well:

SELECT *
FROM GEOTABLE
WHERE
GEOCOLUMN && Expand(GeomFromText(ÕPOINT(1000 1000)Õ,-1),100)
AND
Distance(GeomFromText(ÕPOINT(1000 1000)Õ,-1),GEOCOLUMN) < 100;

See also:
http://postgis.refractions.net/support/wiki/index.php?ExamplesFindNearby

PostGresql online book
http://www.faqs.org/docs/ppbook/book1.htm

postgis tutorial
http://www.mapbender.org/presentations/Spatial_Data_Management_Arnulf_Christl/html/img0.html

PostGIS/PostgresQL Linux
apt-get -s install postgresql-8.1-postgis
see http://lists.alioth.debian.org/pipermail/pkg-grass-general/2006-December/002460.html
and
http://lists.alioth.debian.org/pipermail/pkg-grass-general/2006-December/002462.html

phppgadmin
http://phppgadmin.sourceforge.net/
apt-get -s install phppgadmin

ISSUES
tag count query doesn't work
SELECT tag.*, COUNT(tagrel.id) AS usecount FROM cc_tag tag INNER JOIN cc_tagrelation tagrel ON tag.id = tagrel.tag WHERE tagrel.tagger IN (31282) AND tagrel.item IN (31282) GROUP BY tagrel.tag ORDER BY usecount DESC, tag.name
Caused by: org.postgresql.util.PSQLException: ERROR: column "tag.id" must appear in the GROUP BY clause or be used in an aggregate function

this works:
SELECT tag.*, COUNT(tagrel.id) AS usecount FROM cc_tag tag INNER JOIN cc_tagrelation tagrel ON tag.id = tagrel.tag WHERE tagrel.tagger IN (31282) AND tagrel.item IN (31282) GROUP BY tagrel.tag,tag.id,tag.owner,tag.name,tag.creationdate ORDER BY usecount DESC, tag.name;

or
SELECT tag.id, tag.name, tag.owner, COUNT(tagrel.id) AS usecount FROM cc_tag tag INNER JOIN cc_tagrelation tagrel ON tag.id = tagrel.tag WHERE tagrel.tagger IN (31282) AND tagrel.item IN (31282) GROUP BY tag.name,tag.id,tag.owner  ORDER BY usecount DESC, tag.name;
i.e. the SELECT and GROUP BY fields must match
see also
http://drupal.org/node/56850
http://drupal.org/node/20255

Selecting geocoded postal codes within a given distance ( miles for example )
http://postgis.refractions.net/pipermail/postgis-users/2002-December/001905.html

DEBIAN INSTALL

1) install
apt-get install postgresql-8.1-postgis

2) create oaseuser
su postgres
createuser oaseuser
psql template1
alter user oaseuser password '(the oase password)';
\q

check:
psql -h localhost -U oaseuser template1

3) setup postgis template DB
su postgres
createdb  postgis
createlang plpgsql postgis
psql -d postgis  -f /usr/share/postgresql-8.1-postgis/lwpostgis.sql
psql -d postgis  -f /usr/share/postgresql-8.1-postgis/lwpostgis_upgrade.sql
psql -d postgis  -f /usr/share/postgresql-8.1-postgis/spatial_ref_sys.sql

4) phppgadmin
apt-get install phppgadmin
apt-get install php5-pgsql
restart apache
(may need to increase memsize php5 to 32M in /etc/php5/apache2/php.ini)









